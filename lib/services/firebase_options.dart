// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

final Map<String, String> env = dotenv.env;

class DefaultFirebaseOptions {
  static late FirebaseOptions android;
  static late FirebaseOptions ios;

  static Future<void> init() async {
    await dotenv.load(fileName: "assets/.env");
    android = FirebaseOptions(
      apiKey: env['API_KEY'] ?? '',
      appId: env['ANDROID_APP_ID'] ?? '',
      messagingSenderId: env['MESSAGING_SENDER_ID'] ?? '',
      projectId: env['PROJECT_ID'] ?? '',
      storageBucket: env['STORAGE_BUCKET'] ?? '',
    );

    ios = FirebaseOptions(
      apiKey: env['API_KEY'] ?? '',
      appId: env['IOS_APP_ID'] ?? '',
      messagingSenderId: env['MESSAGING_SENDER_ID'] ?? '',
      projectId: env['PROJECT_ID'] ?? '',
      storageBucket: env['STORAGE_BUCKET'] ?? '',
      iosBundleId: 'com.example.gymRent',
    );
  }

  static Future<FirebaseOptions> currentPlatform() async {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
            'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }

    await init(); // Upewniamy się, że `dotenv` jest zainicjowany przed użyciem

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
      case TargetPlatform.windows:
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for this platform.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
